/*
 * Komga API
 *
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SettingsUpdateDto {
    #[serde(rename = "deleteEmptyCollections", skip_serializing_if = "Option::is_none")]
    pub delete_empty_collections: Option<bool>,
    #[serde(rename = "deleteEmptyReadLists", skip_serializing_if = "Option::is_none")]
    pub delete_empty_read_lists: Option<bool>,
    #[serde(rename = "rememberMeDurationDays", skip_serializing_if = "Option::is_none")]
    pub remember_me_duration_days: Option<i64>,
    #[serde(rename = "renewRememberMeKey", skip_serializing_if = "Option::is_none")]
    pub renew_remember_me_key: Option<bool>,
    #[serde(rename = "thumbnailSize", skip_serializing_if = "Option::is_none")]
    pub thumbnail_size: Option<ThumbnailSize>,
    #[serde(rename = "taskPoolSize", skip_serializing_if = "Option::is_none")]
    pub task_pool_size: Option<i32>,
    #[serde(rename = "serverPort", skip_serializing_if = "Option::is_none")]
    pub server_port: Option<i32>,
    #[serde(rename = "serverContextPath", skip_serializing_if = "Option::is_none")]
    pub server_context_path: Option<String>,
}

impl SettingsUpdateDto {
    pub fn new() -> SettingsUpdateDto {
        SettingsUpdateDto {
            delete_empty_collections: None,
            delete_empty_read_lists: None,
            remember_me_duration_days: None,
            renew_remember_me_key: None,
            thumbnail_size: None,
            task_pool_size: None,
            server_port: None,
            server_context_path: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ThumbnailSize {
    #[serde(rename = "DEFAULT")]
    Default,
    #[serde(rename = "MEDIUM")]
    Medium,
    #[serde(rename = "LARGE")]
    Large,
    #[serde(rename = "XLARGE")]
    Xlarge,
}

impl Default for ThumbnailSize {
    fn default() -> ThumbnailSize {
        Self::Default
    }
}

