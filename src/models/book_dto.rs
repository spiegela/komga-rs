/*
 * Komga API
 *
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BookDto {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "seriesId")]
    pub series_id: String,
    #[serde(rename = "seriesTitle")]
    pub series_title: String,
    #[serde(rename = "libraryId")]
    pub library_id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "lastModified")]
    pub last_modified: String,
    #[serde(rename = "fileLastModified")]
    pub file_last_modified: String,
    #[serde(rename = "sizeBytes")]
    pub size_bytes: i64,
    #[serde(rename = "size")]
    pub size: String,
    #[serde(rename = "media")]
    pub media: Box<crate::models::MediaDto>,
    #[serde(rename = "metadata")]
    pub metadata: Box<crate::models::BookMetadataDto>,
    #[serde(rename = "readProgress", skip_serializing_if = "Option::is_none")]
    pub read_progress: Option<Box<crate::models::ReadProgressDto>>,
    #[serde(rename = "deleted")]
    pub deleted: bool,
    #[serde(rename = "fileHash")]
    pub file_hash: String,
    #[serde(rename = "oneshot")]
    pub oneshot: bool,
}

impl BookDto {
    pub fn new(id: String, series_id: String, series_title: String, library_id: String, name: String, url: String, number: i32, created: String, last_modified: String, file_last_modified: String, size_bytes: i64, size: String, media: crate::models::MediaDto, metadata: crate::models::BookMetadataDto, deleted: bool, file_hash: String, oneshot: bool) -> BookDto {
        BookDto {
            id,
            series_id,
            series_title,
            library_id,
            name,
            url,
            number,
            created,
            last_modified,
            file_last_modified,
            size_bytes,
            size,
            media: Box::new(media),
            metadata: Box::new(metadata),
            read_progress: None,
            deleted,
            file_hash,
            oneshot,
        }
    }
}


