/*
 * Komga API
 *
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MediaType {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "subtype", skip_serializing_if = "Option::is_none")]
    pub subtype: Option<String>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "qualityValue", skip_serializing_if = "Option::is_none")]
    pub quality_value: Option<f64>,
    #[serde(rename = "wildcardType", skip_serializing_if = "Option::is_none")]
    pub wildcard_type: Option<bool>,
    #[serde(rename = "wildcardSubtype", skip_serializing_if = "Option::is_none")]
    pub wildcard_subtype: Option<bool>,
    #[serde(rename = "subtypeSuffix", skip_serializing_if = "Option::is_none")]
    pub subtype_suffix: Option<String>,
    #[serde(rename = "charset", skip_serializing_if = "Option::is_none")]
    pub charset: Option<String>,
    #[serde(rename = "concrete", skip_serializing_if = "Option::is_none")]
    pub concrete: Option<bool>,
}

impl MediaType {
    pub fn new() -> MediaType {
        MediaType {
            r#type: None,
            subtype: None,
            parameters: None,
            quality_value: None,
            wildcard_type: None,
            wildcard_subtype: None,
            subtype_suffix: None,
            charset: None,
            concrete: None,
        }
    }
}


