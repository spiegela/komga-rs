/*
 * Komga API
 *
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SeriesMetadataDto {
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "statusLock")]
    pub status_lock: bool,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "titleLock")]
    pub title_lock: bool,
    #[serde(rename = "titleSort")]
    pub title_sort: String,
    #[serde(rename = "titleSortLock")]
    pub title_sort_lock: bool,
    #[serde(rename = "summary")]
    pub summary: String,
    #[serde(rename = "summaryLock")]
    pub summary_lock: bool,
    #[serde(rename = "readingDirection")]
    pub reading_direction: String,
    #[serde(rename = "readingDirectionLock")]
    pub reading_direction_lock: bool,
    #[serde(rename = "publisher")]
    pub publisher: String,
    #[serde(rename = "publisherLock")]
    pub publisher_lock: bool,
    #[serde(rename = "ageRating", skip_serializing_if = "Option::is_none")]
    pub age_rating: Option<i32>,
    #[serde(rename = "ageRatingLock")]
    pub age_rating_lock: bool,
    #[serde(rename = "language")]
    pub language: String,
    #[serde(rename = "languageLock")]
    pub language_lock: bool,
    #[serde(rename = "genres")]
    pub genres: Vec<String>,
    #[serde(rename = "genresLock")]
    pub genres_lock: bool,
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
    #[serde(rename = "tagsLock")]
    pub tags_lock: bool,
    #[serde(rename = "totalBookCount", skip_serializing_if = "Option::is_none")]
    pub total_book_count: Option<i32>,
    #[serde(rename = "totalBookCountLock")]
    pub total_book_count_lock: bool,
    #[serde(rename = "sharingLabels")]
    pub sharing_labels: Vec<String>,
    #[serde(rename = "sharingLabelsLock")]
    pub sharing_labels_lock: bool,
    #[serde(rename = "links")]
    pub links: Vec<crate::models::WebLinkDto>,
    #[serde(rename = "linksLock")]
    pub links_lock: bool,
    #[serde(rename = "alternateTitles")]
    pub alternate_titles: Vec<crate::models::AlternateTitleDto>,
    #[serde(rename = "alternateTitlesLock")]
    pub alternate_titles_lock: bool,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "lastModified")]
    pub last_modified: String,
}

impl SeriesMetadataDto {
    pub fn new(status: String, status_lock: bool, title: String, title_lock: bool, title_sort: String, title_sort_lock: bool, summary: String, summary_lock: bool, reading_direction: String, reading_direction_lock: bool, publisher: String, publisher_lock: bool, age_rating_lock: bool, language: String, language_lock: bool, genres: Vec<String>, genres_lock: bool, tags: Vec<String>, tags_lock: bool, total_book_count_lock: bool, sharing_labels: Vec<String>, sharing_labels_lock: bool, links: Vec<crate::models::WebLinkDto>, links_lock: bool, alternate_titles: Vec<crate::models::AlternateTitleDto>, alternate_titles_lock: bool, created: String, last_modified: String) -> SeriesMetadataDto {
        SeriesMetadataDto {
            status,
            status_lock,
            title,
            title_lock,
            title_sort,
            title_sort_lock,
            summary,
            summary_lock,
            reading_direction,
            reading_direction_lock,
            publisher,
            publisher_lock,
            age_rating: None,
            age_rating_lock,
            language,
            language_lock,
            genres,
            genres_lock,
            tags,
            tags_lock,
            total_book_count: None,
            total_book_count_lock,
            sharing_labels,
            sharing_labels_lock,
            links,
            links_lock,
            alternate_titles,
            alternate_titles_lock,
            created,
            last_modified,
        }
    }
}


